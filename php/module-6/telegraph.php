<?php
$textStorage = array(
    array(
        'title' => '',
        'text' => ''
    ),
    array(
        'title' => '',
        'text' => ''
    ),
);

$i = 0;

/*2. Реализуйте функцию add для добавления нового текста в массив. 
Функция должна принимать на вход два текстовых параметра — title и
text (заголовок и текст соответственно), и при этом ничего не возвращать.
Функция должна иметь доступ к массиву с текстами — его также можно 
передать в качестве параметра. Помните про особенности передачи параметров
по ссылке и значению.  */

function add(array &$textStorage, string $title, string $text, int &$i,) : void {
    
    $textStorage[$i]['title'] = $title;
    $textStorage[$i]['text'] = $text;

    $i++;
}

/*3. Попробуйте вызвать функцию add два раза, передав ей необходимые параметры,
после чего выведете содержимое массива textStorage любым удобным способом. Если
вы все сделали правильно, то в нём будет два элемента, содержащих переданные
заголовки и тексты. */

add($textStorage, 'Первый заголовок', 'Первый текст', $i);
add($textStorage, 'Второй заголовок', 'Второй текст', $i);

print_r($textStorage);

/* 4. Реализуйте функцию remove для удаления конкретного текста из массива.
На выходе функция должна принимать номер текста (соответствующий индексу в массиве) 
и массив с текстами, а возвращать true в случае, если такой номер (индекс) 
существует, и false, если такого номера (индекса) в массиве не оказалось. */

$numbersOfTexts = sizeof($textStorage) - 1;
$textNumber = 0;

function remove(array &$textStorage, int $textNumber, int $numbersOfTexts) : bool{
    if($textNumber > $numbersOfTexts){
        return false;
    } else{
        $textStorage[$textNumber]['title'] = '';
        $textStorage[$textNumber]['text'] = '';
        return true;
    }
} 

/*   5. Вызовете функцию remove несколько раз, сначала с параметром 0, а затем с
 параметром 5, и выведете значение, которое она вернёт на экран.  */

$try = remove($textStorage, 0, $numbersOfTexts);
var_dump($try);
$try = remove($textStorage, 5, $numbersOfTexts);
var_dump($try);

/*6. Если до этого вы вызвали функцию add два раза, то у вас должно было быть два 
текста в массиве. После вызова remove с указанными параметрами должен остаться только
второй текст. Чтобы убедиться в этом, выведете содержимое массива textStorage любым 
удобным способом.*/

print_r($textStorage);

/*    7. Реализуйте функцию редактирования edit. Суть функции редактирования состоит в
 том, что мы должны иметь возможность обновить текст или заголовок выбранного элемента 
 массива. То есть задать новое значение конкретному элементу. Таким образом, на входе 
 функция должна принимать четыре параметра:

первый — это номер (индекс) текста в массиве; 
второй — заголовок (title); 
третий — сам текст; 
четвёртый — это массив с текстами. 

Самостоятельно определите подходящие типы данных для всех параметров и укажите их при 
инициализации функции. Пусть функция возвращает true, если текст с нужным индексом 
существует, и false, если вдруг такого текста в массиве не оказалось.    */

$editedTextNumber = 15;

function edit(
    int $editedTextNumber,
    string $title,
    string $text,
    array &$textStorage) : bool{
    if($editedTextNumber > sizeof($textStorage) - 1){
        return false;
    } else{
        $textStorage[$editedTextNumber]['title'] = $title;
        $textStorage[$editedTextNumber]['text'] = $text;
        return true;
    }
}

//8. Вызовите edit для первого текста и попробуйте обновить заголовок.
edit($editedTextNumber, 'первый обновленный заголовок', 'первый  текст', $textStorage); 

//9. Выведите textStorage любым удобным способом и убедитесь, что данные сохранились.
print_r($textStorage);

//10. Попробуйте вызвать edit с заведомо несуществующим индексом и убедитесь, что функция возвращает false.
$try = edit(15, 'первый обновленный заголовок', 'первый  текст', $textStorage); 
var_dump($try);


?>